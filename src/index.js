import "./styles.css";
import React from "react";
import ReactDOM from "react-dom";
import Item from "./components/Item";
import ItemForm from "./components/ItemForm";
import data from "./data";

class App extends React.Component {
  constructor() {
    super()
    // State for our class component is one object,
    // unlike split-up state when we use hooks
    this.state = {
      // we want to work with mutable data,
      // rather than just data from the file.
      // so we put it in state.
      groceries: data
    }
  }

  // using an arrow function will "auto-bind"
  // the `this` keyword to this method for us
  toggleItem = (event, itemId) => {
    event.preventDefault()

    this.setState({
      // loop over each item in array and alter it
      // if it matches the passed itemId
      groceries: this.state.groceries.map(item => {
        if (item.id === itemId) {
          return {
            // merge existing item with new values below
            ...item,
            // "toggle" the boolean value or set it to
            // opposite what it currently is
            purchased: !item.purchased
          }
        } else {
          return item
        }
      })
    })
  }

  clearPurchased = event => {
    event.preventDefault()

    this.setState({
      // filter out all groceries that are purchased
      groceries: this.state.groceries.filter(item => {
        // this is the same as:
        // item.purchased === false
        return !item.purchased
      })
    })
  }

  addItem = (event, itemName) => {
    const newItem = {
      // usually the id is generated by backend,
      // but we can use a timestamp in this case
      id: Date.now(),
      name: itemName,
      purchased: false
    }

    this.setState({
      // add the new item to the beginning of the list,
      // and merge in all the existing items
      groceries: [newItem, ...this.state.groceries]
    })
  }

  render() {
    return (
      <div className="App">
        <div className="header">
          <h1>Shopping List</h1>
          <ItemForm addItem={this.addItem} />
        </div>

        <div className="shopping-list">
          {this.state.groceries.map(item => (
            <Item
              key={item.id}
              item={item}
              onClick={(e) => this.toggleItem(e, item.id)}
            />
          ))}

          <button className="clear-btn" onClick={this.clearPurchased}>
            Clear Purchased
          </button>
        </div>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
